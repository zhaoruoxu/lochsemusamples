#include "stdafx.h"
#include "zeroaccess.h"

#include "common.h"

void crypt(const char * in, char * out, int len)
{
    // The following implements the encryption/decryption function for ZeroAccess.
    // I'm not sure what encryption algorithm this is. The table below is used to generate a stream of
    // bytes that are used to XOR the input. This byte stream looks pretty random, but is the same
    // each time. The table was generated from an md5 hash of the "key" that is the first 4 bytes of
    // each transmission. I did not implement the table generation algorithm, but just copied it from
    // running malware sample.
    //
    // The algorithm implemented below was reverse engineered from the malware. On each iteration
    // it grabs a couple of bytes from the table and swaps them in the table. It then adds them
    // together and uses that as an index to retrieve the value to be XORed from the table.
    int i;
    unsigned char bytes_orig[256] = {
        0x07, 0x71, 0x3E, 0x01, 0x92, 0x77, 0x67, 0xE2, 0x6E, 0x55, 0xC2, 0xF7, 0x12, 0x82, 0x8D, 0xE6,
        0x32, 0x96, 0x15, 0x2A, 0x5B, 0xAE, 0x24, 0xD6, 0x60, 0x02, 0xE9, 0x2E, 0x59, 0xA1, 0x7B, 0xF6,
        0xD7, 0xA7, 0x5E, 0xD3, 0x28, 0x1B, 0xC9, 0x1D, 0x0D, 0x86, 0xB5, 0x68, 0xA3, 0x31, 0x7D, 0x5D,
        0xA5, 0xED, 0x5F, 0x4D, 0x76, 0xCC, 0xAD, 0x7A, 0x3D, 0x33, 0xA4, 0x4F, 0x2C, 0x1E, 0x21, 0x97,
        0xDE, 0xC7, 0x3F, 0xCB, 0xF9, 0xB2, 0xBE, 0x3B, 0x9E, 0xA0, 0xEF, 0xA2, 0x29, 0x1C, 0x87, 0x41,
        0xB8, 0x84, 0xCF, 0xE7, 0x95, 0xF5, 0xC0, 0x03, 0x22, 0x9D, 0x0F, 0x98, 0xF4, 0x85, 0x4A, 0x09,
        0x99, 0x63, 0x46, 0xD0, 0x89, 0xF2, 0x26, 0xEC, 0x8A, 0x6D, 0xCE, 0x50, 0x61, 0xAB, 0xAA, 0xBB,
        0x0C, 0xB4, 0xBF, 0xC5, 0x40, 0xAF, 0x3C, 0x8C, 0xC4, 0x39, 0xDF, 0xD5, 0xA9, 0x51, 0xD4, 0x8B,
        0xC1, 0x04, 0x80, 0x91, 0x7E, 0x93, 0x0E, 0xD8, 0xE8, 0x90, 0xCA, 0xD2, 0x9B, 0xF3, 0x45, 0x4C,
        0x9A, 0x43, 0x62, 0xF1, 0x5A, 0x8E, 0x9F, 0x49, 0x48, 0xB1, 0x2F, 0x23, 0x79, 0x37, 0x18, 0xFF,
        0xA6, 0xFA, 0x25, 0x4B, 0xEA, 0xE3, 0xB6, 0x6C, 0xE0, 0xF8, 0x78, 0xB9, 0x6F, 0xC8, 0x6B, 0x0A,
        0x20, 0xDA, 0xEB, 0x81, 0x2B, 0x2D, 0xDB, 0x4E, 0x1F, 0x27, 0x36, 0x42, 0x8F, 0x06, 0xFD, 0x65,
        0x58, 0x9C, 0xD1, 0xB7, 0x47, 0xD9, 0xFB, 0x88, 0x14, 0x35, 0xDD, 0x11, 0x6A, 0xBC, 0x72, 0xAC,
        0xC6, 0xFC, 0x30, 0x08, 0x64, 0x66, 0x44, 0x70, 0xBA, 0xE5, 0x57, 0xC3, 0xB0, 0x5C, 0x17, 0xA8,
        0x56, 0x3A, 0xFE, 0x94, 0x54, 0xB3, 0x7F, 0x52, 0x10, 0x69, 0x73, 0x05, 0x16, 0x1A, 0x74, 0x75,
        0x83, 0x0B, 0xE1, 0x38, 0x34, 0xF0, 0xCD, 0x19, 0x13, 0x7C, 0xDC, 0x00, 0x53, 0xE4, 0xBD, 0xEE
    };
    unsigned char bytes[256];
    // initialize the byte array
    memcpy(bytes,bytes_orig,256);
    // initialize the loop counters and indexes
    unsigned char bi1 = 0; // byte index 1
    unsigned char bi2 = 0; // byte index 2
    unsigned char b1 = 0; // byte value 1
    unsigned char b2 = 0; // byte value 2
    unsigned char bi = 0; // index to xor byte
    unsigned char xor_byte = 0;
    // loop to encrypt/decrypt
    for (i=0;i<len;i++)
    {
        bi1++;
        b1 = bytes[bi1];
        bi2 = bi2 + b1;
        b2 = bytes[bi2];
        bytes[bi1] = b2;
        bytes[bi2] = b1;
        bi = b1+b2;
        xor_byte = bytes[bi];
        out[i] = in[i] ^ xor_byte;
    }
}

void GenerateServerInput()
{
    ZAPacket pkt = {0};
    pkt.Magic = 0xfe4367cd;
    pkt.CRC = 0;
    pkt.Cmd = 0x46746567;   // getF
    pkt.Length = 4;
    pkt.Data = 0xcf000080;

    pkt.CRC = Crc32_ComputeBuf(0, (const void *) &pkt, sizeof(pkt));

    ZAPacket cryptPkt = {0};
    crypt((char *) &pkt, (char *) &cryptPkt, sizeof(ZAPacket));

    for (int i = 0; i < sizeof(ZAPacket); i++) {
        printf("\\x%02x", reinterpret_cast<unsigned char *>(&cryptPkt)[i]);
    }
    printf("\n");
}

void getF(ZAPacket *pkt)
{
    printf("len = %d, data = %08x\n", pkt->Length, pkt->Data);
}

void ZeroAccessTest( char *buf, int len )
{
    if (buf == NULL) {
        GenerateServerInput();
        return;
    }

    if (len != sizeof(ZAPacket)) {
        printf("ZeroAccess: length error\n");
        return;
    }

    ZAPacket *cryptPkt = (ZAPacket *) buf;

    ZAPacket pkt = {0};
    crypt((const char *) cryptPkt, (char *) &pkt, sizeof(ZAPacket));

    printf("Magic is %08x\n", pkt.Magic);
    unsigned int crc = pkt.CRC;
    pkt.CRC = 0;
    unsigned int actualCrc = Crc32_ComputeBuf(0, (const void *) &pkt, sizeof(ZAPacket));
    if (crc == actualCrc) {
        printf("CRC checksum okay\n");
    } else {
        printf("CRC checksum failed\n");
        return;
    }

    if (pkt.Cmd == 0x46746567) {
        getF(&pkt);
    } else {
        printf("Unknown ZeroAccess command\n");
    }
}
